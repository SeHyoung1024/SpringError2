<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">  <!-- Mapper입니다 ~!! 라는 코드 -->
  
<mapper namespace="com.spring_mvc.book.dao.IBookDAO">
	<!-- select 진행 시 반환되는 데이터를 표현하는 태그 먼저 구성 : resultMap -->
	<resultMap id="bookResult" type="com.spring_mvc.book.model.BookVO">
		<result property="bookNo" column="bookNo"/>
		<result property="bookName" column="bookName"  />
        <result property="bookAuthor" column="bookAuthor"  />
        <result property="bookPrice" column="bookPrice"  />
        <result property="bookDate" column="bookDate"  />
        <result property="bookStock" column="bookStock"  />
        <result property="pubNo" column="pubNo"  />
	</resultMap>
	
	<!-- 전체 도서 정보 조회에 해당하는 추상메소드 구현 설정 -->
	<select id="listAllBook" resultMap="bookResult">
		SELECT * FROM book ORDER BY bookNo
	</select>
	<!-- 새 도서 정보 등록하는 추상메소드 구현 설정 모든 컬럼에 데이터 추가시에는 컬럼명은 생략가능 -->
	<insert id="insertBook" parameterType="com.spring_mvc.book.model.BookVO">
		INSERT INTO book(bookNo,bookName,bookAuthor,bookPrice,bookDate,bookStock,pubNo)
		VALUES(#{bookNo},#{bookName},#{bookAuthor},#{bookPrice},#{bookDate},#{bookStock},#{pubNo})
	</insert>
	
	<!-- 도서 상세정보 조회 조건절에 사용하기위한 parameterType 필요 , 반환하기 위한 resultType 필요 -->
	<select id="detailViewBook" parameterType="string" resultType="com.spring_mvc.book.model.BookNo">
		SELECT * FROM book WHERE bookNo=#{bookNo}
	</select>
	
	<!-- 도서 정보 수정 BookVO 클래스 참조값 파라미터로 받고 수정 진행 -->
	<update id="updateBook" parameterType="com.spring_mvc.book.model.BookVO">
		UPDATE book SET bookName = #{bookName},bookAuthor = #{bookAuthor}, bookPrice = #{bookPrice},
                 bookDate = #{bookDate}, bookStock = #{bookStock}, pubNo = #{pubNo}
		WHERE bookNo=#{bookNo}
	</update>
	
	<delete id="deleteBook" parameterType="com.spring_mvc.book.model.BookVO">
		DELETE 
	</delete>
	
	<select id="bookNoCheck" parameterType="string" resultType="string">
		SELECT bookNo FROM book WHERE bookNo=#{bookNo}
	</select>
	
	<!-- 상품 검색 -->
	<!-- WHERE 절 관련 컬럼이 2가지 경우가 나옴
		제조사 검색 prdCompany like '삼성'
		상품명 검색 prdName like '모니터'-->
	<select id="productSearch" parameterType="hashmap" resultMap="bookResult">
		SELECT * FROM product2 WHERE 
			<choose>
				<when test="type != null and type.equals('prdName')"> <!-- 상품명 검색 -->
					prdName LIKE '%' || #{keyword} || '%'			
				</when>
				<when test="type != null and type.equals('prdCompany')"> <!-- 제조사 검색 -->
					prdCompany LIKE '%' || #{keyword} || '%'
				</when>
			</choose>
	</select>
	
	
</mapper>